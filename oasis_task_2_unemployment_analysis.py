# -*- coding: utf-8 -*-
"""Oasis Task-2 Unemployment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ti29lJy4egOQess2wMCJ5aKx4-OvykZx

**BAKALI JABEEN MOHAMMEDTOFFIQ**
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import calendar
import datetime as dt
import plotly.io as pio
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
from IPython.display import HTML

import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import statsmodels.api as sm
from sklearn.tree import DecisionTreeRegressor,DecisionTreeClassifier
from sklearn.svm import SVR
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression,LinearRegression
from sklearn.ensemble import AdaBoostClassifier,AdaBoostRegressor,RandomForestRegressor,RandomForestClassifier,GradientBoostingClassifier,GradientBoostingRegressor
from sklearn.model_selection import train_test_split,GridSearchCV
import xgboost
from sklearn.metrics import accuracy_score,classification_report,f1_score,recall_score,precision_score,mean_absolute_error,r2_score,mean_squared_error,silhouette_score
import warnings
warnings.filterwarnings('ignore')

dfun= pd.read_csv('/content/Unemployment in India (2).csv')
dfun

dfun.info()

dfun.shape

for i in dfun.columns:
    print('-------------------------')
    print(dfun[i].value_counts())

dfun.isnull().sum()

dfun['Region'].value_counts()

dfun[' Date'].value_counts()

dfun[' Frequency'].value_counts()

dfun['Area'].value_counts()

last_records = dfun.tail(15)
last_records

df_droped_lastrecords_null_values  = dfun.drop(dfun.tail(14).index)

# Now data_without_last_30 contains the dataset without the last 30 records
df_droped_lastrecords_null_values

# To see rows with null values
rows_with_null= df_droped_lastrecords_null_values[df_droped_lastrecords_null_values.isnull().any(axis=1)]

# Now 'rows_with_null' contains the rows with at least one null value
rows_with_null

df_cl = df_droped_lastrecords_null_values.dropna()
df_cl

df_cl.isnull().sum()

df_cl.info()

for i in df_cl.columns:
    print(df_cl[i].value_counts())

columns_mapping = {
    'Region': 'Region',
    ' Date': 'Date',
    ' Frequency': 'Frequency',
    ' Estimated Unemployment Rate (%)': 'Estimated_Unemployment_Rate_(%)',
    ' Estimated Employed': 'Estimated_Employed',
    ' Estimated Labour Participation Rate (%)': 'Estimated_Labour_Participation_Rate_(%)',
    ' Area': 'Area'
}

# Rename columns using the dictionary
df_cl.rename(columns=columns_mapping, inplace=True)

# Now the columns are renamed according to the mapping in the 'columns_mapping' dictionary
df_cl.columns

data_types = {
    'Region': str,
    'Date': 'datetime64',
    'Frequency': str,
    'Estimated_Unemployment_Rate_(%)': float,
    'Estimated_Employed': float,
    'Estimated_Labour_Participation_Rate_(%)': float,
    'Area': str
}
# Convert columns to the correct data types
df_cl = df_cl.astype(data_types)

df_cl.info()

# Plot Estimated Unemployment Rate over time
plt.figure(figsize=(10, 6))
plt.plot(df_cl['Date'], df_cl['Estimated_Unemployment_Rate_(%)'], marker='o')
plt.xlabel('Date')
plt.ylabel('Estimated Unemployment Rate (%)')
plt.title('Estimated Unemployment Rate Over Time')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# Plot Estimated Employed vs. Estimated Labour Participation Rate
plt.figure(figsize=(8, 6))
plt.scatter(df_cl['Estimated_Employed'], df_cl['Estimated_Labour_Participation_Rate_(%)'], alpha=0.5)
plt.xlabel('Estimated Employed')
plt.ylabel('Estimated Labour Participation Rate (%)')
plt.title('Estimated Employed vs. Estimated Labour Participation Rate')
plt.grid(True)
plt.tight_layout()
plt.show()

# Create a bar plot of the 'Region' column
plt.figure(figsize=(10, 6))
region_counts = df_cl['Region'].value_counts()
region_counts.plot(kind='bar', color='skyblue')
plt.xlabel('Region')
plt.ylabel('Count')
plt.title('Counts of Regions')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Create a pie chart of the 'Area' column
plt.figure(figsize=(8, 8))
area_counts = df_cl['Area'].value_counts()
plt.pie(area_counts, labels=area_counts.index, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')
plt.title('Distribution of Areas')
plt.tight_layout()
plt.show()

# Box plot to visualize the distribution of Estimated Unemployment Rate across different regions
plt.figure(figsize=(10, 6))
sns.boxplot(x='Region', y='Estimated_Unemployment_Rate_(%)', data=df_cl)
plt.xticks(rotation=45)
plt.xlabel('Region')
plt.ylabel('Estimated Unemployment Rate (%)')
plt.title('Distribution of Estimated Unemployment Rate by Region')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Histogram to see the distribution of Estimated Employed
plt.figure(figsize=(8, 6))
sns.histplot(df_cl['Estimated_Employed'], bins=20, kde=True)
plt.xlabel('Estimated Employed')
plt.ylabel('Count')
plt.title('Distribution of Estimated Employed')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Heatmap to visualize the correlation between numerical columns
plt.figure(figsize=(8, 6))
sns.heatmap(df_cl.corr(), annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Heatmap')
plt.tight_layout()
plt.show()

# Bar plot to compare Estimated Unemployment Rate for different Areas
plt.figure(figsize=(8, 6))
sns.barplot(x='Area', y='Estimated_Unemployment_Rate_(%)', data=df_cl)
plt.xlabel('Area')
plt.ylabel('Estimated Unemployment Rate (%)')
plt.title('Estimated Unemployment Rate Comparison for Different Areas')
plt.tight_layout()
plt.show()