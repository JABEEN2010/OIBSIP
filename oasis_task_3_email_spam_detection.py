# -*- coding: utf-8 -*-
"""Oasis Task-3 Email Spam Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/109YV5HrJvi0wRGUvv_Q-C4E888QY_mCH

**BAKALI JABEEN MOHAMMEDTOFFIQ**
"""

import numpy as np # numerical computing
import pandas as pd # data analysis, working with DataFrames
import matplotlib.pyplot as plt # visualizations
import seaborn as sns # visulizations ++
import nltk #natural lang tool kit

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score

df=pd.read_csv("/content/spam (1).csv",encoding="latin1")
df # reading data

df=df.drop(["Unnamed: 2","Unnamed: 3","Unnamed: 4"],axis=1)
df=df.rename(columns={"v1":"label","v2":"text"})
df['label_in_num'] = df['label'].map({'ham':0,'spam':1})
df.head()

sns.countplot(x=df['label']) # countplot for label

print(" no of rows", len(df))

df.label.value_counts()

df.describe()

df.info()

df.isnull().sum()

df['length']=df['text'].apply(len)
df.head()

X=df.text
X

Y=df.label
Y

Y.replace(to_replace='ham',value=1,inplace=True)
Y.replace(to_replace='spam',value=0,inplace=True)
Y

Y=df.label
Y.value_counts()

sns.histplot(Y)

df['length'].plot(bins=50, kind='hist',figsize=(10,7))

df.hist(column='length', by='label', bins=50, figsize=(15,8))

count=CountVectorizer()
input=['REMINDER FROM O2: To get 2.50 pounds free call credit and details of great offers pls reply 2 this text with your valid name, house no and postcode']

text=count.fit_transform(df['text'])

x_train, x_test, y_train, y_test= train_test_split(text, df['label'], test_size=0.20, random_state=1)
text

print(x_train.shape)
print(x_test.shape)

input=text[5571]

model=MLPClassifier()
model.fit(x_train, y_train)

prediction=model.predict(x_test)
print(prediction)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

print("Multinomial NB")
print("Accuracy score: {}". format(accuracy_score(y_test, prediction)) )
print("Precision score: {}". format(precision_score(y_test, prediction)) )
print("Recall score: {}". format(recall_score(y_test, prediction)))
print("F1 score: {}". format(f1_score(y_test, prediction)))

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

print("Bernoulli NB")
print("Accuracy score: {}". format(accuracy_score(y_test, prediction)) )
print("Precision score: {}". format(precision_score(y_test, prediction)) )
print("Recall score: {}". format(recall_score(y_test, prediction)))
print("F1 score: {}". format(f1_score(y_test, prediction)))

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

print("MLP Classifier")
print("Accuracy score: {}". format(accuracy_score(y_test, prediction)) )
print("Precision score: {}". format(precision_score(y_test, prediction)) )
print("Recall score: {}". format(recall_score(y_test, prediction)))
print("F1 score: {}". format(f1_score(y_test, prediction)))

x_train,x_test,y_train,y_test=train_test_split(X,Y,train_size=0.9,random_state=25)

email= pd.concat([x_train, y_train], axis=1)

# separate minority and majority classes
Spam = email[email.label==0]
Ham = email[email.label==1]

Spam

Ham